{"remainingRequest":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/src/views/Pricing.vue?vue&type=template&id=2a42b908&","dependencies":[{"path":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/src/views/Pricing.vue","mtime":1629998266000},{"path":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/cache-loader/dist/cjs.js","mtime":1650902392000},{"path":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1650902394000},{"path":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/cache-loader/dist/cjs.js","mtime":1650902392000},{"path":"/Users/user/Documents/projets/muse-vue-ant-design-dashboard-pro-v1.0.0/node_modules/vue-loader/lib/index.js","mtime":1650902392000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}